* write a clang plugin to parse annotations and generate a reflstruct for all structs with the reflect annotation.

* Spec for clang attributes:

struct attribute: [[trezz::reflect]]
member variable attribute: [[trezz::reflect("json:required envconfig:name=HOST")]]

Should generate one reflstruct per reflected struct.

Example:

struct [[clang::annotate("trezz::reflect")]] Server
{
    [[clang::annotate("trezz::reflect", "envconfig:name=HOST,required")]] std::string host{};
    [[clang::annotate("trezz::reflect", "envconfig:name=PORT")]] int port{ 80 };
};

// Generated code.

namespace trezz {

auto reflect(const ::Server& s)
{
    return reflstruct{
        reflmember<const std::string&, "host", "envconfig:name=HOST,required">{ s.host },
        reflmember<const int&, "port", "envconfig:name=PORT">{ s.port },
    };
}

auto reflect(::Server& s)
{
    return reflstruct{
        reflmember<std::string&, "host", "envconfig:name=HOST,required">{ s.host },
        reflmember<int&, "port", "envconfig:name=PORT">{ s.port },
    };
}

} // namespace trezz
